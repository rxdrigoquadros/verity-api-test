name: API Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Executa diariamente √†s 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  API_BASE_URL: https://serverest.dev
  API_TIMEOUT: 30000
  RETRY_COUNT: 2

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm install
        npx playwright install --with-deps chromium
    
    - name: Create test directories
      run: |
        mkdir -p tests
        mkdir -p tests/users
        mkdir -p tests/auth
    
    - name: Create Playwright config
      run: |
        cat > playwright.config.js << 'EOF'
        const { defineConfig } = require('@playwright/test');

        module.exports = defineConfig({
          testDir: './tests',
          timeout: 30000,
          retries: process.env.CI ? 2 : 0,
          workers: 1,
          reporter: [
            ['list'],
            ['html', { outputFolder: 'playwright-report' }],
          ],
          use: {
            baseURL: 'https://serverest.dev',
            extraHTTPHeaders: {
              'Accept': 'application/json',
              'Content-Type': 'application/json',
            },
            trace: 'on-first-retry',
          },
          outputDir: 'test-results/',
        });
        EOF
        
        echo "‚úÖ Created playwright.config.js"
    
    - name: Create basic test file (JavaScript)
      run: |
        cat > tests/api.spec.js << 'EOF'
        const { test, expect } = require('@playwright/test');

        test.describe('API Health Check', () => {
          test('should verify API is accessible', async ({ request }) => {
            const response = await request.get('/');
            
            expect(response.ok()).toBeTruthy();
            expect(response.status()).toBe(200);
            
            const body = await response.json();
            console.log('API Response:', JSON.stringify(body, null, 2));
            expect(body).toHaveProperty('message');
          });
          
          test('should get users endpoint', async ({ request }) => {
            const response = await request.get('/usuarios');
            
            expect(response.ok()).toBeTruthy();
            expect(response.status()).toBe(200);
            
            const body = await response.json();
            expect(body).toHaveProperty('usuarios');
            expect(Array.isArray(body.usuarios)).toBeTruthy();
            console.log(`Found ${body.quantidade} users`);
          });
          
          test('should get products endpoint', async ({ request }) => {
            const response = await request.get('/produtos');
            
            expect(response.ok()).toBeTruthy();
            expect(response.status()).toBe(200);
            
            const body = await response.json();
            expect(body).toHaveProperty('produtos');
            expect(Array.isArray(body.produtos)).toBeTruthy();
            console.log(`Found ${body.quantidade} products`);
          });
        });

        test.describe('User CRUD Operations', () => {
          test('should create a new user', async ({ request }) => {
            const randomEmail = `test${Date.now()}@example.com`;
            
            const response = await request.post('/usuarios', {
              data: {
                nome: 'Test User',
                email: randomEmail,
                password: 'test123',
                administrador: 'false'
              }
            });
            
            expect(response.status()).toBe(201);
            const body = await response.json();
            expect(body).toHaveProperty('message', 'Cadastro realizado com sucesso');
            expect(body).toHaveProperty('_id');
            console.log(`Created user with ID: ${body._id}`);
          });

          test('should list all users', async ({ request }) => {
            const response = await request.get('/usuarios');
            
            expect(response.status()).toBe(200);
            const body = await response.json();
            
            expect(body).toHaveProperty('usuarios');
            expect(body).toHaveProperty('quantidade');
            expect(Array.isArray(body.usuarios)).toBeTruthy();
            expect(body.quantidade).toBeGreaterThanOrEqual(0);
          });
        });

        test.describe('Authentication Tests', () => {
          test('should login with valid credentials', async ({ request }) => {
            // First create a user
            const email = `auth${Date.now()}@example.com`;
            const password = 'test123';
            
            await request.post('/usuarios', {
              data: {
                nome: 'Auth Test User',
                email: email,
                password: password,
                administrador: 'false'
              }
            });
            
            // Then login
            const response = await request.post('/login', {
              data: {
                email: email,
                password: password
              }
            });
            
            expect(response.status()).toBe(200);
            const body = await response.json();
            
            expect(body).toHaveProperty('authorization');
            expect(body).toHaveProperty('message', 'Login realizado com sucesso');
            expect(body.authorization).toMatch(/^Bearer /);
            console.log('Login successful, token received');
          });

          test('should fail login with invalid credentials', async ({ request }) => {
            const response = await request.post('/login', {
              data: {
                email: 'invalid@example.com',
                password: 'wrongpassword'
              }
            });
            
            expect(response.status()).toBe(401);
            const body = await response.json();
            
            expect(body).toHaveProperty('message', 'Email e/ou senha inv√°lidos');
            console.log('Login failed as expected with invalid credentials');
          });
        });
        EOF
        
        echo "‚úÖ Created api.spec.js"
        
    - name: Debug - List all files
      run: |
        echo "üìÅ Current directory structure:"
        ls -la
        echo ""
        echo "üìÅ Tests directory:"
        ls -la tests/
        echo ""
        echo "üìÅ Config files:"
        ls -la *.config.* 2>/dev/null || echo "No config files found"
        echo ""
        echo "üìä Test files found:"
        find . -name "*.spec.js" -o -name "*.spec.ts" -o -name "*.test.js" -o -name "*.test.ts"
        
    - name: Check Playwright config
      run: |
        echo "üìÑ Playwright config content:"
        cat playwright.config.js || cat playwright.config.ts || echo "No config file found"
        
    - name: Run Playwright tests with debug
      run: |
        echo "üß™ Running Playwright tests..."
        npx playwright test --list || echo "Failed to list tests"
        echo ""
        echo "üöÄ Executing tests..."
        npx playwright test --reporter=list
      continue-on-error: false
    
    - name: Check test results
      if: always()
      run: |
        echo "Checking for test results..."
        if [ -d "playwright-report" ]; then
          echo "‚úÖ Playwright report directory found"
          ls -la playwright-report/
        else
          echo "‚ö†Ô∏è No playwright report directory found"
        fi
        
        if [ -d "test-results" ]; then
          echo "‚úÖ Test results directory found"
          ls -la test-results/
        else
          echo "‚ö†Ô∏è No test results directory found"
        fi
    
    - name: Upload HTML Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-html-report
        path: playwright-report/
        retention-days: 30
        if-no-files-found: warn
    
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: test-results/
        retention-days: 30
        if-no-files-found: warn
    
    - name: Test Summary
      if: always()
      run: |
        echo "## üß™ Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Configuration:" >> $GITHUB_STEP_SUMMARY
        echo "- **Node Version:** 20.x" >> $GITHUB_STEP_SUMMARY
        echo "- **Runner OS:** Ubuntu Latest" >> $GITHUB_STEP_SUMMARY
        echo "- **API URL:** $API_BASE_URL" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Test Suites:" >> $GITHUB_STEP_SUMMARY
        echo "- API Health Check (3 tests)" >> $GITHUB_STEP_SUMMARY
        echo "- User CRUD Operations (2 tests)" >> $GITHUB_STEP_SUMMARY
        echo "- Authentication (2 tests)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Total:** 7 API tests" >> $GITHUB_STEP_SUMMARY

  comment-on-pr:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' && always()
    
    steps:
    - name: Comment PR with results
      uses: actions/github-script@v7
      with:
        script: |
          const testStatus = '${{ needs.test.result }}';
          const statusEmoji = testStatus === 'success' ? '‚úÖ' : '‚ùå';
          const statusText = testStatus === 'success' ? 'PASSED' : 'FAILED';
          
          const comment = `## üß™ API Test Results
          
          ### Status: ${statusEmoji} ${statusText}
          
          **Test Suites Executed:**
          - API Health Check (3 tests)
          - User CRUD (2 tests)
          - Authentication (2 tests)
          
          **Total:** 7 API tests
          
          [View Full Test Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });