name: API Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Executa diariamente às 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  API_BASE_URL: https://serverest.dev
  API_TIMEOUT: 30000
  RETRY_COUNT: 2

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm install
        npx playwright install --with-deps chromium
    
    - name: Create necessary directories
      run: |
        mkdir -p tests/users
        mkdir -p tests/auth
        mkdir -p tests/rate-limit
        mkdir -p utils
        mkdir -p fixtures
        mkdir -p logs
        mkdir -p test-results
        
    - name: List project structure
      run: |
        echo "Project structure:"
        ls -la
        echo "Tests directory:"
        ls -la tests/ || echo "No tests directory"
        
    - name: Run all tests
      run: npm test
      continue-on-error: false
    
    # Removido o comando show-report que estava travando
    # O relatório HTML já é gerado automaticamente durante os testes
    
    - name: Check test results
      if: always()
      run: |
        echo "Checking for test results..."
        if [ -d "playwright-report" ]; then
          echo "✅ Playwright report directory found"
          ls -la playwright-report/
        else
          echo "⚠️ No playwright report directory found"
        fi
        
        if [ -d "test-results" ]; then
          echo "✅ Test results directory found"
          ls -la test-results/
        else
          echo "⚠️ No test results directory found"
        fi
    
    - name: Upload HTML Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-html-report
        path: playwright-report/
        retention-days: 30
        if-no-files-found: warn
    
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: test-results/
        retention-days: 30
        if-no-files-found: warn
    
    - name: Upload Test Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-logs
        path: logs/
        retention-days: 7
        if-no-files-found: warn
    
    - name: Test Summary
      if: always()
      run: |
        echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Configuration:" >> $GITHUB_STEP_SUMMARY
        echo "- **Node Version:** 20.x" >> $GITHUB_STEP_SUMMARY
        echo "- **Runner OS:** Ubuntu Latest" >> $GITHUB_STEP_SUMMARY
        echo "- **API URL:** $API_BASE_URL" >> $GITHUB_STEP_SUMMARY
        echo "- **Timeout:** $API_TIMEOUT ms" >> $GITHUB_STEP_SUMMARY
        echo "- **Retry Count:** $RETRY_COUNT" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Tenta ler informações dos resultados se existirem
        if [ -f "test-results/results.json" ]; then
          echo "### Test Results:" >> $GITHUB_STEP_SUMMARY
          echo "Results file found - check artifacts for details" >> $GITHUB_STEP_SUMMARY
        else
          echo "### Test Execution:" >> $GITHUB_STEP_SUMMARY
          echo "Tests executed - check artifacts for detailed reports" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Artifacts Generated:" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 HTML Report (view in artifacts)" >> $GITHUB_STEP_SUMMARY
        echo "- 📝 Test Results (JSON/XML)" >> $GITHUB_STEP_SUMMARY
        echo "- 📄 Test Logs" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Note:** Download the HTML report artifact and open index.html locally to view detailed results." >> $GITHUB_STEP_SUMMARY

  comment-on-pr:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' && always()
    
    steps:
    - name: Comment PR with results
      uses: actions/github-script@v7
      with:
        script: |
          const testStatus = '${{ needs.test.result }}';
          const statusEmoji = testStatus === 'success' ? '✅' : '❌';
          const statusText = testStatus === 'success' ? 'PASSED' : 'FAILED';
          
          const comment = `## 🧪 API Test Results
          
          ### Status: ${statusEmoji} ${statusText}
          
          **Test Configuration:**
          - 🟢 Node Version: 20.x
          - 🟢 Runner: Ubuntu Latest
          - 🟢 API: https://serverest.dev
          
          **📦 Artifacts Available:**
          - HTML Test Report - Download and open locally
          - Test Results (JSON/XML)
          - Test Logs
          
          **💡 How to view results:**
          1. Click on the workflow run link below
          2. Download the \`playwright-html-report\` artifact
          3. Extract and open \`index.html\` in your browser
          
          [View Full Test Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ---
          *Generated at: ${new Date().toISOString()}*
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });